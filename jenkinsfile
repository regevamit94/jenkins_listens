def imageSource = "regevamit/apache-wp"
def deploymentName = "apache-wp-dep"
def namespaceName = "apache-webserver"
def labelName = "my-webserver"
def containerName = "apache-wp"
def containerPort = 80
def webAddress = "yankeespro.com"
def svcPort = 8080

pipeline {
    agent {label 'my_gcp_slave'}

     environment {
       CLUSTERNAME = 'test-cluster'
       ZONE = 'europe-west1-b'
       CREDS = credentials('ca585f6b-23d5-4131-8d32-e9ad6c2efa75')
    }  

    stages {
        stage("Clean Workspace"){
            steps {
                cleanWs()
                sh 'git clone https://$CREDS@github.com/regevamit94/jenkins_listens.git'
            }
        }
        stage('Check if Cluster exists') {
            steps {
                script {
                    def statusCode = sh(script: "gcloud container clusters describe $CLUSTERNAME --zone=$ZONE", returnStatus: true)
                    if (statusCode == 0) {
                        echo "${statusCode}"
                        echo "Kubernetes cluster '$CLUSTERNAME' is already running!"
                    } else {
                        echo" ${statusCode}"
                        echo "Kubernetes cluster '$CLUSTERNAME' is not running. It will be created now."
                        sh "gcloud container clusters create $CLUSTERNAME --zone=$ZONE"
                    
                    }
                }
            }
        }

        stage('Check if Ingress controller exists') {
            steps {
                script{
                    def statusCode = sh(script: "kubectl get svc -A | grep -w nginx-ingress-ingress-nginx-controller", returnStatus: true)
                    echo "${statusCode}"
                    if (statusCode == 0) {
                        echo "The nginx ingress controller is already running"
                    } else {
                            def helmstatus = sh(script: "helm version", returnStatus: true)
                            if (helmstatus == 0) {
                                echo "Helm is installed"
                                echo "Applying the NGINX-ingress-controller"
                                echo "helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx && helm repo update"
                                sh "pwd"
                                sh "helm install nginx-ingress ingress-nginx/ingress-nginx -f values.yaml"
                            } else{
                                echo "Installing helm..."
                                sh "curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3"
                                sh "chmod 700 get_helm.sh"
                                echo "Applying the NGINX-ingress-controller..."
                                sh "helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx && helm repo update"
                                sh "helm install nginx-ingress ingress-nginx/ingress-nginx -f values.yaml"

                            }


                    }
                }
            }
        }
            
                   
        stage('Check if deployment exists') {
                steps{
                    script{
                        sh "gcloud container clusters get-credentials '$CLUSTERNAME' --zone $ZONE"
                        def statusCode = sh(script: "kubectl get deployments -n $namespaceName | grep -w $deploymentName || exit 1", returnStatus: true)
                        if (statusCode == 1) {
                            echo 'Creating deployment and applying service&ingress'
                            sh "sed -i 's/\${deploymentName}/$deploymentName/' jenkins_listens/deployment.yaml"
                            sh "sed -i 's/\${labelName}/$labelName/' jenkins_listens/deployment.yaml jenkins_listens/service.yaml"
                            sh "sed -i 's/\${containerName}/$containerName/' jenkins_listens/deployment.yaml"
                            sh "sed -i 's#\${imageSource}#$imageSource#' jenkins_listens/deployment.yaml"
                            sh "sed -i 's#\${namespaceName}#$namespaceName#' jenkins_listens/deployment.yaml jenkins_listens/service.yaml jenkins_listens/ingress.yaml" 
                            sh "sed -i 's/\${containerPort}/$containerPort/' jenkins_listens/deployment.yaml jenkins_listens/service.yaml"
                            sh "sed -i 's/\${webAddress}/$webAddress/' jenkins_listens/ingress.yaml"
                            sh "sed -i 's/\${svcPort}/$svcPort/' jenkins_listens/ingress.yaml jenkins_listens/service.yaml"

                            sh "kubectl apply -f jenkins_listens/deployment.yaml"
                            sh "kubectl apply -f jenkins_listens/service.yaml"
                            sh "kubectl apply -f jenkins_listens/ingress.yaml"
                            

                        } else {
                            echo "deployment: '$deploymentName' is already exist. Aborting..."

                        }
                    }   
                }   
            }  
     }
}
 
