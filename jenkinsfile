def imageName = "apache-wp"
def deploymentName = "apache-wp-dep"
def namespaceName = "apache-webserver"
def labelName = "my-webserver"
def containerName = "apache-wp"
def containerPort = 80

pipeline {
    agent {label 'my_jenkins_slave'}

     environment {
       CLUSTERNAME = 'test'
       CREDS = credentials('ca585f6b-23d5-4131-8d32-e9ad6c2efa75')
    }  

    stages {
        stage("Clean Workspace"){
            steps{
                cleanWs()
            }
        }
        stage('Check if Cluster exists') {
            steps {
                script {
                    def statusCode = sh(script: "kind get clusters | grep -w $CLUSTERNAME", returnStatus: true)
                    if (statusCode == '1') {
                        error "Kubernetes cluster '$CLUSTERNAME' is running!"
                    } else {
                        echo "Kubernetes cluster '$CLUSTERNAME' is not running. It will be created now."

                    }
                    sh 'git clone https://$CREDS@github.com/regevamit94/jenkins_listens.git'
                    sh "kind create cluster --name $CLUSTERNAME --image kindest/node:v1.23.6 --config jenkins_listens/kind.yaml"
                    def statusCode = 0
                    def statusCode = sh(script: "docker images | grep -w  $imageName", returnStatus: true)
                    if (statusCode == '1') {
                        echo "Image is already installed. skipping image build..."
                    } else {
                        sh "docker build -f jenkins_listens/Dockerfile . -t $imageName"
                    }
                    sh "kubectl config use-context $CLUSTERNAME"
                    def statusCode = 0
                    def statusCode = sh(script: "kubectl get deployments | grep -w $deploymentName", returnStatus: true)
                    sh "kubectl apply -f jenkins_listens/deployment.yaml"
                }
            }
        }
    }
} 
