def imageName = "apache-wp"
def deploymentName = "apache-wp-dep"
def namespaceName = "apache-webserver"
def labelName = "my-webserver"
def containerName = "apache-wp"
def containerPort = 80

pipeline {
    agent {label 'my_jenkins_slave'}

     environment {
       CLUSTERNAME = 'test'
       CREDS = credentials('ca585f6b-23d5-4131-8d32-e9ad6c2efa75')
    }  

    stages {
        stage("Clean Workspace"){
            steps {
                cleanWs()
                sh 'git clone https://$CREDS@github.com/regevamit94/jenkins_listens.git'
            }
        }
        stage('Check if Cluster exists') {
            steps {
                script {
                    def statusCode = sh(script: "kubectl config get-contexts kind-$CLUSTERNAME", returnStatus: true)
                    if (statusCode == 0) {
                        echo "${statusCode}"
                        echo "Kubernetes cluster '$CLUSTERNAME' is running!"
                    } else {
                        echo" ${statusCode}"
                        echo "Kubernetes cluster '$CLUSTERNAME' is not running. It will be created now."
                        sh "kind create cluster --name $CLUSTERNAME --image kindest/node:v1.23.6 --config jenkins_listens/kind.yaml"
                        sh 'sleep 5'
                    }
                }
            }
        }
        stage('Check if image exists') {
            steps{
                script{
                    def statusCode = sh(script: "docker images | grep -w $imageName || exit 1 ", returnStatus: true)
                    if (statusCode == 0) {
                        echo "Image is already installed. skipping image build..."
                    } else {
                        echo "Building image..."
                        sh "docker build -f jenkins_listens/Dockerfile . -t $imageName"
                    }
                }
            }
        }
                   
        stage('Check if deployment exists') {
                steps{
                    script{
                        sh "kubectl config use-context kind-$CLUSTERNAME"
                        def statusCode = sh(script: "kubectl get deployments | grep -w $deploymentName || exit 1", returnStatus: true)
                        if (statusCode == 1) {
                            echo 'Creating deployment...'
                            sh "sed -i 's/\${deploymentName}/$deploymentName/' jenkins_listens/deployment.yaml"
                            sh "sed -i 's/\${labelName}/$labelName/' jenkins_listens/deployment.yaml"
                            sh "sed -i 's/\${containerName}/$containerName/' jenkins_listens/deployment.yaml"
                            sh "sed -i 's/\${imageName}/$imageName/' jenkins_listens/deployment.yaml"
                            sh "sed -i 's/\${namespaceName}/$namespaceName/' jenkins_listens/deployment.yaml"
                            sh "sed -i 's/\${containerPort}/$containerPort/' jenkins_listens/deployment.yaml"
                            sh "kubectl apply -f jenkins_listens/deployment.yaml"
                            

                        } else {
                            echo 'deployment is already exist. Aborting...'

                        }
                    }   
                }   
            }  
     }
}
 
